// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package v3nftposmanager

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// INonfungiblePositionManagerMintParams is an auto generated low-level Go binding around an user-defined struct.
type INonfungiblePositionManagerMintParams struct {
	Token0     common.Address
	Token1     common.Address
	Fee        *big.Int
	TickLower  *big.Int
	TickUpper  *big.Int
	Amount     *big.Int
	Amount0Max *big.Int
	Amount1Max *big.Int
	Recipient  common.Address
	Deadline   *big.Int
}

// V3nftposmanagerABI is the input ABI used to generate the binding from.
const V3nftposmanagerABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDescriptor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"structINonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// V3nftposmanagerBin is the compiled bytecode used for deploying new contracts.
var V3nftposmanagerBin = "0x610120604052600d80546001600160b01b0319166001176001600160b01b0316600160b01b1790553480156200003457600080fd5b5060405162005f6a38038062005f6a8339810160408190526200005791620002db565b82826040518060400160405280601b81526020017f556e697377617020563320506f736974696f6e73204e46542d563100000000008152506040518060400160405280600a815260200169554e492d56332d504f5360b01b815250604051806040016040528060018152602001603160f81b8152508282620000e66301ffc9a760e01b6200018d60201b60201c565b8151620000fb90600690602085019062000212565b5080516200011190600790602084019062000212565b50620001246380ac58cd60e01b6200018d565b62000136635b5e139f60e01b6200018d565b6200014863780e9d6360e01b6200018d565b50508251602093840120608052805192019190912060a052506001600160601b0319606092831b811660c05290821b811660e05291901b166101005250620003249050565b6001600160e01b03198082161415620001ed576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024a576000855562000295565b82601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002a7565b5090565b5b80821115620002a35760008155600101620002a8565b80516001600160a01b0381168114620002d657600080fd5b919050565b600080600060608486031215620002f0578283fd5b620002fb84620002be565b92506200030b60208501620002be565b91506200031b60408501620002be565b90509250925092565b60805160a05160c05160601c60e05160601c6101005160601c615bc1620003a96000398061303152508061027e5280611e0a5280611f065280611f8e5280613eeb5280613f345280613fa852508061086f5280610d775280610e4052806111a45280612fcb52806130ef528061382652508061168252508061165d5250615bc16000f3fe60806040526004361061026e5760003560e01c80634f6ccce711610153578063a4a78f0c116100cb578063c87b56dd1161007f578063df2ab5bb11610064578063df2ab5bb146106c2578063e985e9c5146106d5578063f3995c67146106f5576102f2565b8063c87b56dd14610682578063d3487997146106a2576102f2565b8063b88d4fde116100b0578063b88d4fde1461063a578063c2e3140a1461065a578063c45a01551461066d576102f2565b8063a4a78f0c14610607578063ac9650d81461061a576102f2565b806370a082311161012257806395d89b411161010757806395d89b411461059a57806399fbab88146105af578063a22cb465146105e7576102f2565b806370a08231146105675780637ac2ff7b14610587576102f2565b80634f6ccce7146104ff5780635889b4771461051f5780636352211e146105325780636c0360eb14610552576102f2565b80632f745c59116101e657806342842e0e116101b55780634659a4941161019a5780634659a494146104c457806349404b7c146104d75780634aa4a4fc146104ea576102f2565b806342842e0e1461049157806342966c68146104b1576102f2565b80632f745c591461042557806330adf81f146104455780633644e5151461045a5780633a3a6dc81461046f576102f2565b8063095ea7b31161023d57806318160ddd1161022257806318160ddd146103d057806323b872dd146103f2578063260e12b014610412576102f2565b8063095ea7b31461039d57806313ead562146103bd576102f2565b806301ffc9a7146102f757806303a3f2ab1461032d57806306fdde031461034e578063081812fc14610370576102f2565b366102f257336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f0576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561030357600080fd5b50610317610312366004614fe8565b610708565b60405161032491906155fb565b60405180910390f35b61034061033b366004615353565b610743565b6040516103249291906157ac565b34801561035a57600080fd5b50610363610b67565b6040516103249190615657565b34801561037c57600080fd5b5061039061038b3660046152d0565b610c1b565b60405161032491906154af565b3480156103a957600080fd5b506102f06103b8366004614eb2565b610c6e565b6103906103cb366004614d45565b610d44565b3480156103dc57600080fd5b506103e5611059565b6040516103249190615606565b3480156103fe57600080fd5b506102f061040d366004614d9e565b61106a565b61034061042036600461530c565b6110c1565b34801561043157600080fd5b506103e5610440366004614eb2565b6115de565b34801561045157600080fd5b506103e5611609565b34801561046657600080fd5b506103e561162d565b61048261047d366004615162565b6116d0565b604051610324939291906157ba565b34801561049d57600080fd5b506102f06104ac366004614d9e565b611c34565b6102f06104bf3660046152d0565b611c4f565b6102f06104d2366004614f1e565b611d53565b6102f06104e53660046152e8565b611e06565b3480156104f657600080fd5b50610390611f8c565b34801561050b57600080fd5b506103e561051a3660046152d0565b611fb0565b61034061052d366004615353565b611fc6565b34801561053e57600080fd5b5061039061054d3660046152d0565b612363565b34801561055e57600080fd5b5061036361238b565b34801561057357600080fd5b506103e5610582366004614cd5565b612390565b6102f0610595366004614f1e565b6123f8565b3480156105a657600080fd5b506103636128c2565b3480156105bb57600080fd5b506105cf6105ca3660046152d0565b612941565b6040516103249c9b9a999897969594939291906157d0565b3480156105f357600080fd5b506102f0610602366004614e85565b612b90565b6102f0610615366004614f1e565b612cb3565b61062d610628366004614f79565b612d83565b604051610324919061557d565b34801561064657600080fd5b506102f0610655366004614dde565b612ec3565b6102f0610668366004614f1e565b612f21565b34801561067957600080fd5b50610390612fc9565b34801561068e57600080fd5b5061036361069d3660046152d0565b612fed565b3480156106ae57600080fd5b506102f06106bd3660046153bd565b6130da565b6102f06106d0366004614edd565b613158565b3480156106e157600080fd5b506103176106f0366004614d0d565b613241565b6102f0610703366004614f1e565b61326f565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b6000808661075133826132fa565b6107765760405162461bcd60e51b815260040161076d9061566a565b60405180910390fd5b8380610780613396565b11156107d3576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6000886fffffffffffffffffffffffffffffffff16116107f257600080fd5b6000898152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b0390811682529190920154908116948201949094527401000000000000000000000000000000000000000090930462ffffff1691830191909152916108947f00000000000000000000000000000000000000000000000000000000000000008361339a565b9050806001600160a01b031663a34123a784600101600a9054906101000a900460020b85600101600d9054906101000a900460020b8e6040518463ffffffff1660e01b81526004016108e893929190615628565b6040805180830381600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610939919061539a565b90975095508987101561094b57600080fd5b8886101561095857600080fd5b60018301546000906109929030906a01000000000000000000008104600290810b916d01000000000000000000000000009004900b6134a9565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016109c39190615606565b60a06040518083038186803b1580156109db57600080fd5b505afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1391906151c4565b50509250925050610a6e866002015483038760010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000613516565b6004870180547fffffffffffffffffffffffffffffffff000000000000000000000000000000008116928d016fffffffffffffffffffffffffffffffff91821601811692909217905560038701546001880154610ae69291840391700100000000000000000000000000000000918290041690613516565b6004870180546fffffffffffffffffffffffffffffffff808216938d0170010000000000000000000000000000000092839004821601811682029390931790915560028801939093556003870191909155600190950180548087169083900487169e909e03909516029b909b17909255509399929850919650505050505050565b60068054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c115780601f10610be657610100808354040283529160200191610c11565b820191906000526020600020905b815481529060010190602001808311610bf457829003601f168201915b5050505050905090565b6000610c26826135e3565b610c425760405162461bcd60e51b815260040161076d906156a1565b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610c7982612363565b9050806001600160a01b0316836001600160a01b03161415610ccc5760405162461bcd60e51b8152600401808060200182810382526021815260200180615b636021913960400191505060405180910390fd5b806001600160a01b0316610cde6135f0565b6001600160a01b03161480610cfa5750610cfa816106f06135f0565b610d355760405162461bcd60e51b8152600401808060200182810382526038815260200180615a8d6038913960400191505060405180910390fd5b610d3f83836135f4565b505050565b6040517f1698ee820000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631698ee8290610db0908890889088906004016154c3565b60206040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e009190614cf1565b90506001600160a01b038116610f4a576040517fa16712950000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a167129590610e79908890889088906004016154c3565b602060405180830381600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb9190614cf1565b6040517ff637731d0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063f637731d90610f139085906004016154af565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b50505050611051565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190615225565b5050505050509050806001600160a01b03166000141561104f576040517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063f637731d9061101c9086906004016154af565b600060405180830381600087803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505050505b505b949350505050565b60006110656002613678565b905090565b61107b6110756135f0565b826132fa565b6110b65760405162461bcd60e51b8152600401808060200182810382526031815260200180615b846031913960400191505060405180910390fd5b610d3f838383613683565b600080856110cf33826132fa565b6110eb5760405162461bcd60e51b815260040161076d9061566a565b6000856fffffffffffffffffffffffffffffffff16118061111e57506000846fffffffffffffffffffffffffffffffff16115b61112757600080fd5b6000878152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b0390811682529190920154908116948201949094527401000000000000000000000000000000000000000090930462ffffff1691830191909152916111c97f00000000000000000000000000000000000000000000000000000000000000008361339a565b600484015460018501549192506fffffffffffffffffffffffffffffffff80821692700100000000000000000000000000000000928390048216929004161561144e5760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791611280916a01000000000000000000008104600290810b926d0100000000000000000000000000909204900b90600090600401615628565b6040805180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d1919061539a565b5050600185015460009081906001600160a01b0386169063514ea4bf906113209030906a01000000000000000000008104600290810b916d01000000000000000000000000009004900b6134a9565b6040518263ffffffff1660e01b815260040161133c9190615606565b60a06040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138c91906151c4565b505092509250506113e7876002015483038860010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000613516565b8401935061143f876003015482038860010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000613516565b60028801929092556003870155015b816fffffffffffffffffffffffffffffffff168a6fffffffffffffffffffffffffffffffff161161147f5789611481565b815b816fffffffffffffffffffffffffffffffff168a6fffffffffffffffffffffffffffffffff16116114b257896114b4565b815b809a50819b505050826001600160a01b0316634f1eb3d88c87600101600a9054906101000a900460020b88600101600d9054906101000a900460020b8e8e6040518663ffffffff1660e01b8152600401611512959493929190615537565b6040805180830381600087803b15801561152b57600080fd5b505af115801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190615196565b600490960180549b9093036fffffffffffffffffffffffffffffffff9081169a9092038216700100000000000000000000000000000000029a82169a909a177fffffffffffffffffffffffffffffffff0000000000000000000000000000000016989098179055505094841697949093169550929350505050565b6001600160a01b038216600090815260016020526040812061160090836137cf565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000806000836101200135806116e4613396565b1115611737576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101208101909152600090611815908061175860208a018a614cd5565b6001600160a01b031681526020018860200160208101906117799190614cd5565b6001600160a01b0316815260200161179760608a0160408b016152b6565b62ffffff1681523060208201526040016117b760808a0160608b01615028565b60020b81526020016117cf60a08a0160808b01615028565b60020b81526020016117e760c08a0160a08b0161517a565b6fffffffffffffffffffffffffffffffff1681526020018860c0013581526020018860e001358152506137db565b9195509350905061188661183161012088016101008901614cd5565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff9283169081019092161790915596508661394e565b60006118b13061189c60808a0160608b01615028565b6118ac60a08b0160808c01615028565b6134a9565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016118e29190615606565b60a06040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193291906151c4565b5050925092505060006119ab8560405180606001604052808d600001602081019061195d9190614cd5565b6001600160a01b031681526020018d602001602081019061197e9190614cd5565b6001600160a01b031681526020018d604001602081019061199f91906152b6565b62ffffff169052613a7c565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018b6060016020810190611a039190615028565b60020b8152602001611a1b60a08d0160808e01615028565b60020b8152602001611a3360c08d0160a08e0161517a565b6fffffffffffffffffffffffffffffffff90811682526020808301969096526040808301959095526000606080840182905260809384018290528d8252600c88529086902084518154988601517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009099166bffffffffffffffffffffffff91821617166c010000000000000000000000006001600160a01b039099169890980297909717875594830151600187018054968501519385015160a08601517fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090981669ffffffffffffffffffff909316929092177fffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffff166a0100000000000000000000600295860b62ffffff90811691909102919091177fffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffff166d010000000000000000000000000093860b9190911692909202919091178216700100000000000000000000000000000000968316870217905560c08301519186019190915560e0820151600386015561010082015160049095018054610120909301517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169582169590951781169116909202919091179091555094969395509193505050565b610d3f83838360405180602001604052806000815250612ec3565b80611c5a33826132fa565b611c765760405162461bcd60e51b815260040161076d9061566a565b6000828152600c60205260409020600181015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16158015611cd0575060048101546fffffffffffffffffffffffffffffffff16155b8015611d045750600481015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16155b611d205760405162461bcd60e51b815260040161076d90615735565b6000838152600c6020526040812081815560018101829055600281018290556003810182905560040155610d3f83613bdd565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e7557600080fd5b505afa158015611e89573d6000803e3d6000fd5b505050506040513d6020811015611e9f57600080fd5b505190508215611efe5782811015611efe576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610d3f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b50505050610d3f8282613cc8565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080611fbe600284613def565b509392505050565b6000808280611fd3613396565b1115612026576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6000876fffffffffffffffffffffffffffffffff161161204557600080fd5b6000888152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff740100000000000000000000000000000000000000009092048216838901908152885161012081018a5284518616815291519094169881019890985291519091169486019490945230918501919091526a01000000000000000000008104600290810b810b60808601526d0100000000000000000000000000909104810b900b60a08401526fffffffffffffffffffffffffffffffff8b1660c084015260e083018a90526101008301899052929091612154906137db565b600186015492985090965091506000906121969030906a01000000000000000000008104600290810b916d01000000000000000000000000009004900b6134a9565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016121c79190615606565b60a06040518083038186803b1580156121df57600080fd5b505afa1580156121f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221791906151c4565b50509250925050612272866002015483038760010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000613516565b6004870180546fffffffffffffffffffffffffffffffff80821690930183167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116179055600387015460018801546122e79291840391700100000000000000000000000000000000918290041690613516565b6004870180546fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216909401811684029181169190911790915560028801939093556003870191909155600190950180548681048316909d0182169095029b169a909a179092555092989197509095505050505050565b600061160382604051806060016040528060298152602001615aef6029913960029190613e0d565b606090565b60006001600160a01b0382166123d75760405162461bcd60e51b815260040180806020018281038252602a815260200180615ac5602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061160390613678565b83612401613396565b1115612454576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b600061245e61162d565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad888861248a81613e1a565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e28301949094526101028083019490945280518083039094018452610122909101905281519101209050600061252d87612363565b9050806001600160a01b0316886001600160a01b031614156125805760405162461bcd60e51b8152600401808060200182810382526027815260200180615a166027913960400191505060405180910390fd5b61258981613e6c565b15612764576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b8381101561265357818101518382015260200161263b565b50505050905090810190601f1680156126805780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561269e57600080fd5b505afa1580156126b2573d6000803e3d6000fd5b505050506040513d60208110156126c857600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e000000000000000000000000000000000000000000000000000000001461275f576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b6128ae565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156127c0573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116612846576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b0316146128ac576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b6128b888886135f4565b5050505050505050565b60078054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c115780601f10610be657610100808354040283529160200191610c11565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b60608601526d01000000000000000000000000008204810b810b810b60808601526fffffffffffffffffffffffffffffffff70010000000000000000000000000000000092839004811660a08701529083015460c0860152600383015460e086015260049092015480831661010086015204166101208301528291829182918291829182918291829182918291829190612a6a5760405162461bcd60e51b815260040161076d906156fe565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612b986135f0565b6001600160a01b0316826001600160a01b03161415612bfe576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000612c0b6135f0565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155612c6d6135f0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b158015612d3b57600080fd5b505afa158015612d4f573d6000803e3d6000fd5b505050506040513d6020811015612d6557600080fd5b50511015612d7b57612d7b868686868686611d53565b505050505050565b60608167ffffffffffffffff81118015612d9c57600080fd5b50604051908082528060200260200182016040528015612dd057816020015b6060815260200190600190039081612dbb5790505b50905060005b82811015612ebc5760008030868685818110612dee57fe5b9050602002810190612e00919061586f565b604051612e0e92919061549f565b600060405180830381855af49150503d8060008114612e49576040519150601f19603f3d011682016040523d82523d6000602084013e612e4e565b606091505b509150915081612e9a57604481511015612e6757600080fd5b60048101905080806020019051810190612e819190615044565b60405162461bcd60e51b815260040161076d9190615657565b80848481518110612ea757fe5b60209081029190910101525050600101612dd6565b5092915050565b612ed4612ece6135f0565b836132fa565b612f0f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615b846031913960400191505060405180910390fd5b612f1b84848484613e72565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b158015612f8957600080fd5b505afa158015612f9d573d6000803e3d6000fd5b505050506040513d6020811015612fb357600080fd5b50511015612d7b57612d7b86868686868661326f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612ff8826135e3565b61300157600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590613068903090869060040161560f565b60006040518083038186803b15801561308057600080fd5b505afa158015613094573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116039190810190615044565b60006130e8828401846150b7565b90506131187f00000000000000000000000000000000000000000000000000000000000000008260000151613ec4565b50841561313357805151602082015161313391903388613ee7565b83156131515761315181600001516020015182602001513387613ee7565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131a757600080fd5b505afa1580156131bb573d6000803e3d6000fd5b505050506040513d60208110156131d157600080fd5b5051905082156132305782811015613230576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b8015612f1b57612f1b84838361407c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b158015611de657600080fd5b6000613305826135e3565b6133405760405162461bcd60e51b815260040180806020018281038252602c815260200180615a61602c913960400191505060405180910390fd5b600061334b83612363565b9050806001600160a01b0316846001600160a01b031614806133865750836001600160a01b031661337b84610c1b565b6001600160a01b0316145b8061105157506110518185613241565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133c257600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527f01d4d358e07707f4db84b6a7527455b06f95ee89b5d059b4a1298ada7b6c7d6760d5808301919091528251808303909101815260f5909101909152805191012090565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098686029250828110908390030390508061356a576000841161355f57600080fd5b50829004905061350f565b80841161357657600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600061160360028361422a565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b03851690810291909117909155819061363f82612363565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061160382614236565b826001600160a01b031661369682612363565b6001600160a01b0316146136db5760405162461bcd60e51b8152600401808060200182810382526029815260200180615b3a6029913960400191505060405180910390fd5b6001600160a01b0382166137205760405162461bcd60e51b8152600401808060200182810382526024815260200180615a3d6024913960400191505060405180910390fd5b61372b838383610d3f565b6137366000826135f4565b6001600160a01b0383166000908152600160205260409020613758908261423a565b506001600160a01b038216600090815260016020526040902061377b9082614246565b5061378860028284614252565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006116008383614268565b600080600080604051806060016040528086600001516001600160a01b0316815260200186602001516001600160a01b03168152602001866040015162ffffff16815250905061384b7f00000000000000000000000000000000000000000000000000000000000000008261339a565b9150816001600160a01b0316633c8a7d8d866060015187608001518860a001518960c001516040518060400160405280888152602001336001600160a01b031681525060405160200161389e919061576c565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016138cd9594939291906154eb565b6040805180830381600087803b1580156138e657600080fd5b505af11580156138fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391e919061539a565b60e0870151919550935084111561393457600080fd5b84610100015183111561394657600080fd5b509193909250565b6001600160a01b0382166139a9576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6139b2816135e3565b15613a04576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613a1060008383610d3f565b6001600160a01b0382166000908152600160205260409020613a329082614246565b50613a3f60028284614252565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff16806116035750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff1674010000000000000000000000000000000000000000027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b6000613be882612363565b9050613bf681600084610d3f565b613c016000836135f4565b60008281526008602052604090205460027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600184161502019091160415613c5d576000828152600860205260408120613c5d91614c45565b6001600160a01b0381166000908152600160205260409020613c7f908361423a565b50613c8b6002836142cc565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310613d3257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613cf5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d94576040519150601f19603f3d011682016040523d82523d6000602084013e613d99565b606091505b5050905080610d3f576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000808080613dfe86866142d8565b909450925050505b9250929050565b6000611051848484614353565b6000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b613e7d848484613683565b613e898484848461441d565b612f1b5760405162461bcd60e51b81526004018080602001828103825260328152602001806159e46032913960400191505060405180910390fd5b6000613ed0838361339a565b9050336001600160a01b0382161461160357600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316148015613f2d5750814791508110155b1561404f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613f8d57600080fd5b505af1158015613fa1573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561401d57600080fd5b505af1158015614031573d6000803e3d6000fd5b505050506040513d602081101561404757600080fd5b506131519050565b6001600160a01b0384163014156140705761406b85848461407c565b613151565b613151858585856145f9565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b6020831061414457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614107565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146141a6576040519150601f19603f3d011682016040523d82523d6000602084013e6141ab565b606091505b50915091508180156141d95750805115806141d957508080602001905160208110156141d657600080fd5b50515b613151576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061160083836147af565b5490565b600061160083836147c7565b600061160083836148ab565b600061105184846001600160a01b0385166148f5565b815460009082106142aa5760405162461bcd60e51b81526004018080602001828103825260228152602001806159c26022913960400191505060405180910390fd5b8260000182815481106142b957fe5b9060005260206000200154905092915050565b6000611600838361498c565b81546000908190831061431c5760405162461bcd60e51b8152600401808060200182810382526022815260200180615b186022913960400191505060405180910390fd5b600084600001848154811061432d57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816143ee5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143b357818101518382015260200161439b565b50505050905090810190601f1680156143e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061440157fe5b9060005260206000209060020201600101549150509392505050565b6000614431846001600160a01b0316613e6c565b61443d57506001611051565b600061458e7f150b7a020000000000000000000000000000000000000000000000000000000061446b6135f0565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156144d25781810151838201526020016144ba565b50505050905090810190601f1680156144ff5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016159e4603291396001600160a01b0388169190614a9c565b905060008180602001905160208110156145a757600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106146c957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161468c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461472b576040519150601f19603f3d011682016040523d82523d6000602084013e614730565b606091505b509150915081801561475e57508051158061475e575080806020019051602081101561475b57600080fd5b50515b612d7b576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156148a15783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061481857fe5b906000526020600020015490508087600001848154811061483557fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061486557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611603565b6000915050611603565b60006148b783836147af565b6148ed57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611603565b506000611603565b60008281526001840160205260408120548061495a57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561350f565b8285600001600183038154811061496d57fe5b906000526020600020906002020160010181905550600091505061350f565b600081815260018301602052604081205480156148a15783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106149dd57fe5b90600052602060002090600202019050808760000184815481106149fd57fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614a3c57fe5b6000828152602080822060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90940193840201828155600190810183905592909355888152898201909252604082209190915594506116039350505050565b6060611051848460008585614ab085613e6c565b614b01576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614b5d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614b20565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614bbf576040519150601f19603f3d011682016040523d82523d6000602084013e614bc4565b606091505b5091509150614bd4828286614bdf565b979650505050505050565b60608315614bee57508161350f565b825115614bfe5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156143b357818101518382015260200161439b565b50805460018160011615610100020316600290046000825580601f10614c6b5750614c89565b601f016020900490600052602060002090810190614c899190614c8c565b50565b5b80821115614ca15760008155600101614c8d565b5090565b803561073e81615962565b805161ffff8116811461073e57600080fd5b803562ffffff8116811461073e57600080fd5b600060208284031215614ce6578081fd5b813561350f81615962565b600060208284031215614d02578081fd5b815161350f81615962565b60008060408385031215614d1f578081fd5b8235614d2a81615962565b91506020830135614d3a81615962565b809150509250929050565b60008060008060808587031215614d5a578182fd5b8435614d6581615962565b93506020850135614d7581615962565b9250614d8360408601614cc2565b91506060850135614d9381615962565b939692955090935050565b600080600060608486031215614db2578081fd5b8335614dbd81615962565b92506020840135614dcd81615962565b929592945050506040919091013590565b60008060008060808587031215614df3578182fd5b8435614dfe81615962565b93506020850135614e0e81615962565b925060408501359150606085013567ffffffffffffffff811115614e30578182fd5b8501601f81018713614e40578182fd5b8035614e53614e4e826158f6565b6158d2565b818152886020838501011115614e67578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215614e97578182fd5b8235614ea281615962565b91506020830135614d3a81615977565b60008060408385031215614ec4578182fd5b8235614ecf81615962565b946020939093013593505050565b600080600060608486031215614ef1578081fd5b8335614efc81615962565b9250602084013591506040840135614f1381615962565b809150509250925092565b60008060008060008060c08789031215614f36578384fd5b8635614f4181615962565b955060208701359450604087013593506060870135614f5f816159b2565b9598949750929560808101359460a0909101359350915050565b60008060208385031215614f8b578182fd5b823567ffffffffffffffff80821115614fa2578384fd5b818501915085601f830112614fb5578384fd5b813581811115614fc3578485fd5b8660208083028501011115614fd6578485fd5b60209290920196919550909350505050565b600060208284031215614ff9578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461350f578182fd5b600060208284031215615039578081fd5b813561350f81615985565b600060208284031215615055578081fd5b815167ffffffffffffffff81111561506b578182fd5b8201601f8101841361507b578182fd5b8051615089614e4e826158f6565b81815285602083850101111561509d578384fd5b6150ae826020830160208601615936565b95945050505050565b600081830360808112156150c9578182fd5b6040516040810167ffffffffffffffff82821081831117156150e757fe5b8160405260608412156150f8578485fd5b60a083019350818410818511171561510c57fe5b50826040528435925061511e83615962565b91825260208401359161513083615962565b82606083015261514260408601614cc2565b6080830152815261515560608501614ca5565b6020820152949350505050565b60006101408284031215615174578081fd5b50919050565b60006020828403121561518b578081fd5b813561350f81615994565b600080604083850312156151a8578182fd5b82516151b381615994565b6020840151909250614d3a81615994565b600080600080600060a086880312156151db578283fd5b85516151e681615994565b809550506020860151935060408601519250606086015161520681615994565b608087015190925061521781615994565b809150509295509295909350565b600080600080600080600060e0888a03121561523f578485fd5b875161524a81615962565b602089015190975061525b81615985565b955061526960408901614cb0565b945061527760608901614cb0565b935061528560808901614cb0565b925060a0880151615295816159b2565b60c08901519092506152a681615977565b8091505092959891949750929550565b6000602082840312156152c7578081fd5b61160082614cc2565b6000602082840312156152e1578081fd5b5035919050565b600080604083850312156152fa578182fd5b823591506020830135614d3a81615962565b60008060008060808587031215615321578182fd5b84359350602085013561533381615962565b9250604085013561534381615994565b91506060850135614d9381615994565b600080600080600060a0868803121561536a578283fd5b85359450602086013561537c81615994565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156153ac578182fd5b505080516020909101519092909150565b600080600080606085870312156153d2578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156153f7578384fd5b818701915087601f83011261540a578384fd5b813581811115615418578485fd5b886020828501011115615429578485fd5b95989497505060200194505050565b60008151808452615450816020860160208601615936565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60020b9052565b6fffffffffffffffffffffffffffffffff169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b60006001600160a01b03871682528560020b60208301528460020b60408301526fffffffffffffffffffffffffffffffff8416606083015260a06080830152614bd460a0830184615438565b6001600160a01b03959095168552600293840b60208601529190920b60408401526fffffffffffffffffffffffffffffffff918216606084015216608082015260a00190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156155ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526155dc858351615438565b945092850192908501906001016155a2565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526fffffffffffffffffffffffffffffffff909116604082015260600190565b6000602082526116006020830184615438565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a0820152610180810161582760c0830189615482565b61583460e0830188615489565b8561010083015284610120830152615850610140830185615489565b61585e610160830184615489565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126158a3578283fd5b83018035915067ffffffffffffffff8211156158bd578283fd5b602001915036819003821315613e0657600080fd5b60405181810167ffffffffffffffff811182821017156158ee57fe5b604052919050565b600067ffffffffffffffff82111561590a57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015615951578181015183820152602001615939565b83811115612f1b5750506000910152565b6001600160a01b0381168114614c8957600080fd5b8015158114614c8957600080fd5b8060020b8114614c8957600080fd5b6fffffffffffffffffffffffffffffffff81168114614c8957600080fd5b60ff81168114614c8957600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a"

// DeployV3nftposmanager deploys a new Ethereum contract, binding an instance of V3nftposmanager to it.
func DeployV3nftposmanager(auth *bind.TransactOpts, backend bind.ContractBackend, _factory common.Address, _WETH9 common.Address, _tokenDescriptor_ common.Address) (common.Address, *types.Transaction, *V3nftposmanager, error) {
	parsed, err := abi.JSON(strings.NewReader(V3nftposmanagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(V3nftposmanagerBin), backend, _factory, _WETH9, _tokenDescriptor_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &V3nftposmanager{V3nftposmanagerCaller: V3nftposmanagerCaller{contract: contract}, V3nftposmanagerTransactor: V3nftposmanagerTransactor{contract: contract}, V3nftposmanagerFilterer: V3nftposmanagerFilterer{contract: contract}}, nil
}

// V3nftposmanager is an auto generated Go binding around an Ethereum contract.
type V3nftposmanager struct {
	V3nftposmanagerCaller     // Read-only binding to the contract
	V3nftposmanagerTransactor // Write-only binding to the contract
	V3nftposmanagerFilterer   // Log filterer for contract events
}

// V3nftposmanagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type V3nftposmanagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// V3nftposmanagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type V3nftposmanagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// V3nftposmanagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type V3nftposmanagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// V3nftposmanagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type V3nftposmanagerSession struct {
	Contract     *V3nftposmanager  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// V3nftposmanagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type V3nftposmanagerCallerSession struct {
	Contract *V3nftposmanagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// V3nftposmanagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type V3nftposmanagerTransactorSession struct {
	Contract     *V3nftposmanagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// V3nftposmanagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type V3nftposmanagerRaw struct {
	Contract *V3nftposmanager // Generic contract binding to access the raw methods on
}

// V3nftposmanagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type V3nftposmanagerCallerRaw struct {
	Contract *V3nftposmanagerCaller // Generic read-only contract binding to access the raw methods on
}

// V3nftposmanagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type V3nftposmanagerTransactorRaw struct {
	Contract *V3nftposmanagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewV3nftposmanager creates a new instance of V3nftposmanager, bound to a specific deployed contract.
func NewV3nftposmanager(address common.Address, backend bind.ContractBackend) (*V3nftposmanager, error) {
	contract, err := bindV3nftposmanager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanager{V3nftposmanagerCaller: V3nftposmanagerCaller{contract: contract}, V3nftposmanagerTransactor: V3nftposmanagerTransactor{contract: contract}, V3nftposmanagerFilterer: V3nftposmanagerFilterer{contract: contract}}, nil
}

// NewV3nftposmanagerCaller creates a new read-only instance of V3nftposmanager, bound to a specific deployed contract.
func NewV3nftposmanagerCaller(address common.Address, caller bind.ContractCaller) (*V3nftposmanagerCaller, error) {
	contract, err := bindV3nftposmanager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerCaller{contract: contract}, nil
}

// NewV3nftposmanagerTransactor creates a new write-only instance of V3nftposmanager, bound to a specific deployed contract.
func NewV3nftposmanagerTransactor(address common.Address, transactor bind.ContractTransactor) (*V3nftposmanagerTransactor, error) {
	contract, err := bindV3nftposmanager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerTransactor{contract: contract}, nil
}

// NewV3nftposmanagerFilterer creates a new log filterer instance of V3nftposmanager, bound to a specific deployed contract.
func NewV3nftposmanagerFilterer(address common.Address, filterer bind.ContractFilterer) (*V3nftposmanagerFilterer, error) {
	contract, err := bindV3nftposmanager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerFilterer{contract: contract}, nil
}

// bindV3nftposmanager binds a generic wrapper to an already deployed contract.
func bindV3nftposmanager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(V3nftposmanagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_V3nftposmanager *V3nftposmanagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _V3nftposmanager.Contract.V3nftposmanagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_V3nftposmanager *V3nftposmanagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.V3nftposmanagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_V3nftposmanager *V3nftposmanagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.V3nftposmanagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_V3nftposmanager *V3nftposmanagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _V3nftposmanager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_V3nftposmanager *V3nftposmanagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_V3nftposmanager *V3nftposmanagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _V3nftposmanager.Contract.DOMAINSEPARATOR(&_V3nftposmanager.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _V3nftposmanager.Contract.DOMAINSEPARATOR(&_V3nftposmanager.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _V3nftposmanager.Contract.PERMITTYPEHASH(&_V3nftposmanager.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_V3nftposmanager *V3nftposmanagerCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _V3nftposmanager.Contract.PERMITTYPEHASH(&_V3nftposmanager.CallOpts)
}

// WETH9 is a free data retrieval call binding the contract method 0x4aa4a4fc.
//
// Solidity: function WETH9() view returns(address)
func (_V3nftposmanager *V3nftposmanagerCaller) WETH9(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "WETH9")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WETH9 is a free data retrieval call binding the contract method 0x4aa4a4fc.
//
// Solidity: function WETH9() view returns(address)
func (_V3nftposmanager *V3nftposmanagerSession) WETH9() (common.Address, error) {
	return _V3nftposmanager.Contract.WETH9(&_V3nftposmanager.CallOpts)
}

// WETH9 is a free data retrieval call binding the contract method 0x4aa4a4fc.
//
// Solidity: function WETH9() view returns(address)
func (_V3nftposmanager *V3nftposmanagerCallerSession) WETH9() (common.Address, error) {
	return _V3nftposmanager.Contract.WETH9(&_V3nftposmanager.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _V3nftposmanager.Contract.BalanceOf(&_V3nftposmanager.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _V3nftposmanager.Contract.BalanceOf(&_V3nftposmanager.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() pure returns(string)
func (_V3nftposmanager *V3nftposmanagerCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() pure returns(string)
func (_V3nftposmanager *V3nftposmanagerSession) BaseURI() (string, error) {
	return _V3nftposmanager.Contract.BaseURI(&_V3nftposmanager.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() pure returns(string)
func (_V3nftposmanager *V3nftposmanagerCallerSession) BaseURI() (string, error) {
	return _V3nftposmanager.Contract.BaseURI(&_V3nftposmanager.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_V3nftposmanager *V3nftposmanagerCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_V3nftposmanager *V3nftposmanagerSession) Factory() (common.Address, error) {
	return _V3nftposmanager.Contract.Factory(&_V3nftposmanager.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_V3nftposmanager *V3nftposmanagerCallerSession) Factory() (common.Address, error) {
	return _V3nftposmanager.Contract.Factory(&_V3nftposmanager.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _V3nftposmanager.Contract.GetApproved(&_V3nftposmanager.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _V3nftposmanager.Contract.GetApproved(&_V3nftposmanager.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _V3nftposmanager.Contract.IsApprovedForAll(&_V3nftposmanager.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _V3nftposmanager.Contract.IsApprovedForAll(&_V3nftposmanager.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_V3nftposmanager *V3nftposmanagerCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_V3nftposmanager *V3nftposmanagerSession) Name() (string, error) {
	return _V3nftposmanager.Contract.Name(&_V3nftposmanager.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_V3nftposmanager *V3nftposmanagerCallerSession) Name() (string, error) {
	return _V3nftposmanager.Contract.Name(&_V3nftposmanager.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _V3nftposmanager.Contract.OwnerOf(&_V3nftposmanager.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_V3nftposmanager *V3nftposmanagerCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _V3nftposmanager.Contract.OwnerOf(&_V3nftposmanager.CallOpts, tokenId)
}

// Positions is a free data retrieval call binding the contract method 0x99fbab88.
//
// Solidity: function positions(uint256 tokenId) view returns(uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)
func (_V3nftposmanager *V3nftposmanagerCaller) Positions(opts *bind.CallOpts, tokenId *big.Int) (struct {
	Nonce                    *big.Int
	Operator                 common.Address
	Token0                   common.Address
	Token1                   common.Address
	Fee                      *big.Int
	TickLower                *big.Int
	TickUpper                *big.Int
	Liquidity                *big.Int
	FeeGrowthInside0LastX128 *big.Int
	FeeGrowthInside1LastX128 *big.Int
	TokensOwed0              *big.Int
	TokensOwed1              *big.Int
}, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "positions", tokenId)

	outstruct := new(struct {
		Nonce                    *big.Int
		Operator                 common.Address
		Token0                   common.Address
		Token1                   common.Address
		Fee                      *big.Int
		TickLower                *big.Int
		TickUpper                *big.Int
		Liquidity                *big.Int
		FeeGrowthInside0LastX128 *big.Int
		FeeGrowthInside1LastX128 *big.Int
		TokensOwed0              *big.Int
		TokensOwed1              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Nonce = out[0].(*big.Int)
	outstruct.Operator = out[1].(common.Address)
	outstruct.Token0 = out[2].(common.Address)
	outstruct.Token1 = out[3].(common.Address)
	outstruct.Fee = out[4].(*big.Int)
	outstruct.TickLower = out[5].(*big.Int)
	outstruct.TickUpper = out[6].(*big.Int)
	outstruct.Liquidity = out[7].(*big.Int)
	outstruct.FeeGrowthInside0LastX128 = out[8].(*big.Int)
	outstruct.FeeGrowthInside1LastX128 = out[9].(*big.Int)
	outstruct.TokensOwed0 = out[10].(*big.Int)
	outstruct.TokensOwed1 = out[11].(*big.Int)

	return *outstruct, err

}

// Positions is a free data retrieval call binding the contract method 0x99fbab88.
//
// Solidity: function positions(uint256 tokenId) view returns(uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)
func (_V3nftposmanager *V3nftposmanagerSession) Positions(tokenId *big.Int) (struct {
	Nonce                    *big.Int
	Operator                 common.Address
	Token0                   common.Address
	Token1                   common.Address
	Fee                      *big.Int
	TickLower                *big.Int
	TickUpper                *big.Int
	Liquidity                *big.Int
	FeeGrowthInside0LastX128 *big.Int
	FeeGrowthInside1LastX128 *big.Int
	TokensOwed0              *big.Int
	TokensOwed1              *big.Int
}, error) {
	return _V3nftposmanager.Contract.Positions(&_V3nftposmanager.CallOpts, tokenId)
}

// Positions is a free data retrieval call binding the contract method 0x99fbab88.
//
// Solidity: function positions(uint256 tokenId) view returns(uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)
func (_V3nftposmanager *V3nftposmanagerCallerSession) Positions(tokenId *big.Int) (struct {
	Nonce                    *big.Int
	Operator                 common.Address
	Token0                   common.Address
	Token1                   common.Address
	Fee                      *big.Int
	TickLower                *big.Int
	TickUpper                *big.Int
	Liquidity                *big.Int
	FeeGrowthInside0LastX128 *big.Int
	FeeGrowthInside1LastX128 *big.Int
	TokensOwed0              *big.Int
	TokensOwed1              *big.Int
}, error) {
	return _V3nftposmanager.Contract.Positions(&_V3nftposmanager.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _V3nftposmanager.Contract.SupportsInterface(&_V3nftposmanager.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_V3nftposmanager *V3nftposmanagerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _V3nftposmanager.Contract.SupportsInterface(&_V3nftposmanager.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_V3nftposmanager *V3nftposmanagerCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_V3nftposmanager *V3nftposmanagerSession) Symbol() (string, error) {
	return _V3nftposmanager.Contract.Symbol(&_V3nftposmanager.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_V3nftposmanager *V3nftposmanagerCallerSession) Symbol() (string, error) {
	return _V3nftposmanager.Contract.Symbol(&_V3nftposmanager.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _V3nftposmanager.Contract.TokenByIndex(&_V3nftposmanager.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _V3nftposmanager.Contract.TokenByIndex(&_V3nftposmanager.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _V3nftposmanager.Contract.TokenOfOwnerByIndex(&_V3nftposmanager.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _V3nftposmanager.Contract.TokenOfOwnerByIndex(&_V3nftposmanager.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_V3nftposmanager *V3nftposmanagerCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_V3nftposmanager *V3nftposmanagerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _V3nftposmanager.Contract.TokenURI(&_V3nftposmanager.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_V3nftposmanager *V3nftposmanagerCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _V3nftposmanager.Contract.TokenURI(&_V3nftposmanager.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _V3nftposmanager.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerSession) TotalSupply() (*big.Int, error) {
	return _V3nftposmanager.Contract.TotalSupply(&_V3nftposmanager.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_V3nftposmanager *V3nftposmanagerCallerSession) TotalSupply() (*big.Int, error) {
	return _V3nftposmanager.Contract.TotalSupply(&_V3nftposmanager.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Approve(&_V3nftposmanager.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Approve(&_V3nftposmanager.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Burn(&_V3nftposmanager.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Burn(&_V3nftposmanager.TransactOpts, tokenId)
}

// Collect is a paid mutator transaction binding the contract method 0x260e12b0.
//
// Solidity: function collect(uint256 tokenId, address recipient, uint128 amount0Max, uint128 amount1Max) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactor) Collect(opts *bind.TransactOpts, tokenId *big.Int, recipient common.Address, amount0Max *big.Int, amount1Max *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "collect", tokenId, recipient, amount0Max, amount1Max)
}

// Collect is a paid mutator transaction binding the contract method 0x260e12b0.
//
// Solidity: function collect(uint256 tokenId, address recipient, uint128 amount0Max, uint128 amount1Max) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerSession) Collect(tokenId *big.Int, recipient common.Address, amount0Max *big.Int, amount1Max *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Collect(&_V3nftposmanager.TransactOpts, tokenId, recipient, amount0Max, amount1Max)
}

// Collect is a paid mutator transaction binding the contract method 0x260e12b0.
//
// Solidity: function collect(uint256 tokenId, address recipient, uint128 amount0Max, uint128 amount1Max) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Collect(tokenId *big.Int, recipient common.Address, amount0Max *big.Int, amount1Max *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Collect(&_V3nftposmanager.TransactOpts, tokenId, recipient, amount0Max, amount1Max)
}

// CreateAndInitializePoolIfNecessary is a paid mutator transaction binding the contract method 0x13ead562.
//
// Solidity: function createAndInitializePoolIfNecessary(address tokenA, address tokenB, uint24 fee, uint160 sqrtPriceX96) payable returns(address pool)
func (_V3nftposmanager *V3nftposmanagerTransactor) CreateAndInitializePoolIfNecessary(opts *bind.TransactOpts, tokenA common.Address, tokenB common.Address, fee *big.Int, sqrtPriceX96 *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "createAndInitializePoolIfNecessary", tokenA, tokenB, fee, sqrtPriceX96)
}

// CreateAndInitializePoolIfNecessary is a paid mutator transaction binding the contract method 0x13ead562.
//
// Solidity: function createAndInitializePoolIfNecessary(address tokenA, address tokenB, uint24 fee, uint160 sqrtPriceX96) payable returns(address pool)
func (_V3nftposmanager *V3nftposmanagerSession) CreateAndInitializePoolIfNecessary(tokenA common.Address, tokenB common.Address, fee *big.Int, sqrtPriceX96 *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.CreateAndInitializePoolIfNecessary(&_V3nftposmanager.TransactOpts, tokenA, tokenB, fee, sqrtPriceX96)
}

// CreateAndInitializePoolIfNecessary is a paid mutator transaction binding the contract method 0x13ead562.
//
// Solidity: function createAndInitializePoolIfNecessary(address tokenA, address tokenB, uint24 fee, uint160 sqrtPriceX96) payable returns(address pool)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) CreateAndInitializePoolIfNecessary(tokenA common.Address, tokenB common.Address, fee *big.Int, sqrtPriceX96 *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.CreateAndInitializePoolIfNecessary(&_V3nftposmanager.TransactOpts, tokenA, tokenB, fee, sqrtPriceX96)
}

// DecreaseLiquidity is a paid mutator transaction binding the contract method 0x03a3f2ab.
//
// Solidity: function decreaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Min, uint256 amount1Min, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactor) DecreaseLiquidity(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, amount0Min *big.Int, amount1Min *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "decreaseLiquidity", tokenId, amount, amount0Min, amount1Min, deadline)
}

// DecreaseLiquidity is a paid mutator transaction binding the contract method 0x03a3f2ab.
//
// Solidity: function decreaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Min, uint256 amount1Min, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerSession) DecreaseLiquidity(tokenId *big.Int, amount *big.Int, amount0Min *big.Int, amount1Min *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.DecreaseLiquidity(&_V3nftposmanager.TransactOpts, tokenId, amount, amount0Min, amount1Min, deadline)
}

// DecreaseLiquidity is a paid mutator transaction binding the contract method 0x03a3f2ab.
//
// Solidity: function decreaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Min, uint256 amount1Min, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) DecreaseLiquidity(tokenId *big.Int, amount *big.Int, amount0Min *big.Int, amount1Min *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.DecreaseLiquidity(&_V3nftposmanager.TransactOpts, tokenId, amount, amount0Min, amount1Min, deadline)
}

// IncreaseLiquidity is a paid mutator transaction binding the contract method 0x5889b477.
//
// Solidity: function increaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Max, uint256 amount1Max, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactor) IncreaseLiquidity(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, amount0Max *big.Int, amount1Max *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "increaseLiquidity", tokenId, amount, amount0Max, amount1Max, deadline)
}

// IncreaseLiquidity is a paid mutator transaction binding the contract method 0x5889b477.
//
// Solidity: function increaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Max, uint256 amount1Max, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerSession) IncreaseLiquidity(tokenId *big.Int, amount *big.Int, amount0Max *big.Int, amount1Max *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.IncreaseLiquidity(&_V3nftposmanager.TransactOpts, tokenId, amount, amount0Max, amount1Max, deadline)
}

// IncreaseLiquidity is a paid mutator transaction binding the contract method 0x5889b477.
//
// Solidity: function increaseLiquidity(uint256 tokenId, uint128 amount, uint256 amount0Max, uint256 amount1Max, uint256 deadline) payable returns(uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) IncreaseLiquidity(tokenId *big.Int, amount *big.Int, amount0Max *big.Int, amount1Max *big.Int, deadline *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.IncreaseLiquidity(&_V3nftposmanager.TransactOpts, tokenId, amount, amount0Max, amount1Max, deadline)
}

// Mint is a paid mutator transaction binding the contract method 0x3a3a6dc8.
//
// Solidity: function mint((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256) params) payable returns(uint256 tokenId, uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactor) Mint(opts *bind.TransactOpts, params INonfungiblePositionManagerMintParams) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "mint", params)
}

// Mint is a paid mutator transaction binding the contract method 0x3a3a6dc8.
//
// Solidity: function mint((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256) params) payable returns(uint256 tokenId, uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerSession) Mint(params INonfungiblePositionManagerMintParams) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Mint(&_V3nftposmanager.TransactOpts, params)
}

// Mint is a paid mutator transaction binding the contract method 0x3a3a6dc8.
//
// Solidity: function mint((address,address,uint24,int24,int24,uint128,uint256,uint256,address,uint256) params) payable returns(uint256 tokenId, uint256 amount0, uint256 amount1)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Mint(params INonfungiblePositionManagerMintParams) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Mint(&_V3nftposmanager.TransactOpts, params)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_V3nftposmanager *V3nftposmanagerTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_V3nftposmanager *V3nftposmanagerSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Multicall(&_V3nftposmanager.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Multicall(&_V3nftposmanager.TransactOpts, data)
}

// Permit is a paid mutator transaction binding the contract method 0x7ac2ff7b.
//
// Solidity: function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) Permit(opts *bind.TransactOpts, spender common.Address, tokenId *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "permit", spender, tokenId, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x7ac2ff7b.
//
// Solidity: function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) Permit(spender common.Address, tokenId *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Permit(&_V3nftposmanager.TransactOpts, spender, tokenId, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x7ac2ff7b.
//
// Solidity: function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Permit(spender common.Address, tokenId *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Permit(&_V3nftposmanager.TransactOpts, spender, tokenId, deadline, v, r, s)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SafeTransferFrom(&_V3nftposmanager.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SafeTransferFrom(&_V3nftposmanager.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_V3nftposmanager *V3nftposmanagerSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SafeTransferFrom0(&_V3nftposmanager.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SafeTransferFrom0(&_V3nftposmanager.TransactOpts, from, to, tokenId, _data)
}

// SelfPermit is a paid mutator transaction binding the contract method 0xf3995c67.
//
// Solidity: function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SelfPermit(opts *bind.TransactOpts, token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "selfPermit", token, value, deadline, v, r, s)
}

// SelfPermit is a paid mutator transaction binding the contract method 0xf3995c67.
//
// Solidity: function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) SelfPermit(token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermit(&_V3nftposmanager.TransactOpts, token, value, deadline, v, r, s)
}

// SelfPermit is a paid mutator transaction binding the contract method 0xf3995c67.
//
// Solidity: function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SelfPermit(token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermit(&_V3nftposmanager.TransactOpts, token, value, deadline, v, r, s)
}

// SelfPermitAllowed is a paid mutator transaction binding the contract method 0x4659a494.
//
// Solidity: function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SelfPermitAllowed(opts *bind.TransactOpts, token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "selfPermitAllowed", token, nonce, expiry, v, r, s)
}

// SelfPermitAllowed is a paid mutator transaction binding the contract method 0x4659a494.
//
// Solidity: function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) SelfPermitAllowed(token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitAllowed(&_V3nftposmanager.TransactOpts, token, nonce, expiry, v, r, s)
}

// SelfPermitAllowed is a paid mutator transaction binding the contract method 0x4659a494.
//
// Solidity: function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SelfPermitAllowed(token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitAllowed(&_V3nftposmanager.TransactOpts, token, nonce, expiry, v, r, s)
}

// SelfPermitAllowedIfNecessary is a paid mutator transaction binding the contract method 0xa4a78f0c.
//
// Solidity: function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SelfPermitAllowedIfNecessary(opts *bind.TransactOpts, token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "selfPermitAllowedIfNecessary", token, nonce, expiry, v, r, s)
}

// SelfPermitAllowedIfNecessary is a paid mutator transaction binding the contract method 0xa4a78f0c.
//
// Solidity: function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) SelfPermitAllowedIfNecessary(token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitAllowedIfNecessary(&_V3nftposmanager.TransactOpts, token, nonce, expiry, v, r, s)
}

// SelfPermitAllowedIfNecessary is a paid mutator transaction binding the contract method 0xa4a78f0c.
//
// Solidity: function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SelfPermitAllowedIfNecessary(token common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitAllowedIfNecessary(&_V3nftposmanager.TransactOpts, token, nonce, expiry, v, r, s)
}

// SelfPermitIfNecessary is a paid mutator transaction binding the contract method 0xc2e3140a.
//
// Solidity: function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SelfPermitIfNecessary(opts *bind.TransactOpts, token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "selfPermitIfNecessary", token, value, deadline, v, r, s)
}

// SelfPermitIfNecessary is a paid mutator transaction binding the contract method 0xc2e3140a.
//
// Solidity: function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) SelfPermitIfNecessary(token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitIfNecessary(&_V3nftposmanager.TransactOpts, token, value, deadline, v, r, s)
}

// SelfPermitIfNecessary is a paid mutator transaction binding the contract method 0xc2e3140a.
//
// Solidity: function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SelfPermitIfNecessary(token common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SelfPermitIfNecessary(&_V3nftposmanager.TransactOpts, token, value, deadline, v, r, s)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_V3nftposmanager *V3nftposmanagerSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SetApprovalForAll(&_V3nftposmanager.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SetApprovalForAll(&_V3nftposmanager.TransactOpts, operator, approved)
}

// SweepToken is a paid mutator transaction binding the contract method 0xdf2ab5bb.
//
// Solidity: function sweepToken(address token, uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) SweepToken(opts *bind.TransactOpts, token common.Address, amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "sweepToken", token, amountMinimum, recipient)
}

// SweepToken is a paid mutator transaction binding the contract method 0xdf2ab5bb.
//
// Solidity: function sweepToken(address token, uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) SweepToken(token common.Address, amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SweepToken(&_V3nftposmanager.TransactOpts, token, amountMinimum, recipient)
}

// SweepToken is a paid mutator transaction binding the contract method 0xdf2ab5bb.
//
// Solidity: function sweepToken(address token, uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) SweepToken(token common.Address, amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.SweepToken(&_V3nftposmanager.TransactOpts, token, amountMinimum, recipient)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.TransferFrom(&_V3nftposmanager.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.TransferFrom(&_V3nftposmanager.TransactOpts, from, to, tokenId)
}

// UniswapV3MintCallback is a paid mutator transaction binding the contract method 0xd3487997.
//
// Solidity: function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes data) returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) UniswapV3MintCallback(opts *bind.TransactOpts, amount0Owed *big.Int, amount1Owed *big.Int, data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "uniswapV3MintCallback", amount0Owed, amount1Owed, data)
}

// UniswapV3MintCallback is a paid mutator transaction binding the contract method 0xd3487997.
//
// Solidity: function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes data) returns()
func (_V3nftposmanager *V3nftposmanagerSession) UniswapV3MintCallback(amount0Owed *big.Int, amount1Owed *big.Int, data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.UniswapV3MintCallback(&_V3nftposmanager.TransactOpts, amount0Owed, amount1Owed, data)
}

// UniswapV3MintCallback is a paid mutator transaction binding the contract method 0xd3487997.
//
// Solidity: function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes data) returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) UniswapV3MintCallback(amount0Owed *big.Int, amount1Owed *big.Int, data []byte) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.UniswapV3MintCallback(&_V3nftposmanager.TransactOpts, amount0Owed, amount1Owed, data)
}

// UnwrapWETH9 is a paid mutator transaction binding the contract method 0x49404b7c.
//
// Solidity: function unwrapWETH9(uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) UnwrapWETH9(opts *bind.TransactOpts, amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.contract.Transact(opts, "unwrapWETH9", amountMinimum, recipient)
}

// UnwrapWETH9 is a paid mutator transaction binding the contract method 0x49404b7c.
//
// Solidity: function unwrapWETH9(uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) UnwrapWETH9(amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.UnwrapWETH9(&_V3nftposmanager.TransactOpts, amountMinimum, recipient)
}

// UnwrapWETH9 is a paid mutator transaction binding the contract method 0x49404b7c.
//
// Solidity: function unwrapWETH9(uint256 amountMinimum, address recipient) payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) UnwrapWETH9(amountMinimum *big.Int, recipient common.Address) (*types.Transaction, error) {
	return _V3nftposmanager.Contract.UnwrapWETH9(&_V3nftposmanager.TransactOpts, amountMinimum, recipient)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _V3nftposmanager.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_V3nftposmanager *V3nftposmanagerSession) Receive() (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Receive(&_V3nftposmanager.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_V3nftposmanager *V3nftposmanagerTransactorSession) Receive() (*types.Transaction, error) {
	return _V3nftposmanager.Contract.Receive(&_V3nftposmanager.TransactOpts)
}

// V3nftposmanagerApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the V3nftposmanager contract.
type V3nftposmanagerApprovalIterator struct {
	Event *V3nftposmanagerApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *V3nftposmanagerApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(V3nftposmanagerApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(V3nftposmanagerApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *V3nftposmanagerApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *V3nftposmanagerApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// V3nftposmanagerApproval represents a Approval event raised by the V3nftposmanager contract.
type V3nftposmanagerApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*V3nftposmanagerApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _V3nftposmanager.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerApprovalIterator{contract: _V3nftposmanager.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *V3nftposmanagerApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _V3nftposmanager.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(V3nftposmanagerApproval)
				if err := _V3nftposmanager.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) ParseApproval(log types.Log) (*V3nftposmanagerApproval, error) {
	event := new(V3nftposmanagerApproval)
	if err := _V3nftposmanager.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// V3nftposmanagerApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the V3nftposmanager contract.
type V3nftposmanagerApprovalForAllIterator struct {
	Event *V3nftposmanagerApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *V3nftposmanagerApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(V3nftposmanagerApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(V3nftposmanagerApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *V3nftposmanagerApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *V3nftposmanagerApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// V3nftposmanagerApprovalForAll represents a ApprovalForAll event raised by the V3nftposmanager contract.
type V3nftposmanagerApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_V3nftposmanager *V3nftposmanagerFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*V3nftposmanagerApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _V3nftposmanager.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerApprovalForAllIterator{contract: _V3nftposmanager.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_V3nftposmanager *V3nftposmanagerFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *V3nftposmanagerApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _V3nftposmanager.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(V3nftposmanagerApprovalForAll)
				if err := _V3nftposmanager.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_V3nftposmanager *V3nftposmanagerFilterer) ParseApprovalForAll(log types.Log) (*V3nftposmanagerApprovalForAll, error) {
	event := new(V3nftposmanagerApprovalForAll)
	if err := _V3nftposmanager.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// V3nftposmanagerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the V3nftposmanager contract.
type V3nftposmanagerTransferIterator struct {
	Event *V3nftposmanagerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *V3nftposmanagerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(V3nftposmanagerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(V3nftposmanagerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *V3nftposmanagerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *V3nftposmanagerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// V3nftposmanagerTransfer represents a Transfer event raised by the V3nftposmanager contract.
type V3nftposmanagerTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*V3nftposmanagerTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _V3nftposmanager.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &V3nftposmanagerTransferIterator{contract: _V3nftposmanager.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *V3nftposmanagerTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _V3nftposmanager.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(V3nftposmanagerTransfer)
				if err := _V3nftposmanager.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_V3nftposmanager *V3nftposmanagerFilterer) ParseTransfer(log types.Log) (*V3nftposmanagerTransfer, error) {
	event := new(V3nftposmanagerTransfer)
	if err := _V3nftposmanager.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
